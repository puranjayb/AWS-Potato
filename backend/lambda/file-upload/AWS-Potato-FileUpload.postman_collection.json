{
	"info": {
		"_postman_id": "simplified-file-upload-collection",
		"name": "AWS Potato - Simplified File Upload",
		"description": "Simplified file upload API using presigned URLs only",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "simplified-upload"
	},
	"item": [
		{
			"name": "1. Generate Upload URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    if (response.upload_url) {",
							"        pm.environment.set('upload_url', response.upload_url);",
							"        pm.environment.set('file_id', response.file_id);",
							"        pm.environment.set('s3_key', response.s3_key);",
							"        console.log('Upload URL generated successfully');",
							"        console.log('File ID:', response.file_id);",
							"        console.log('Upload URL:', response.upload_url);",
							"    }",
							"} else {",
							"    console.log('Failed to generate upload URL:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{id_token}}",
						"description": "JWT token from Cognito"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"upload\",\n    \"filename\": \"test-file.txt\",\n    \"content_type\": \"text/plain\",\n    \"project_id\": \"optional-project-id\",\n    \"expiration\": 3600\n}"
				},
				"url": {
					"raw": "{{api_url}}/file-upload",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"file-upload"
					]
				},
				"description": "Generate a presigned URL for uploading a file to S3"
			},
			"response": []
		},
		{
			"name": "2. Upload File to S3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    console.log('File uploaded to S3 successfully');",
							"} else {",
							"    console.log('Failed to upload file to S3:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "This is a test file content for the simplified upload process."
				},
				"url": {
					"raw": "{{upload_url}}",
					"host": [
						"{{upload_url}}"
					]
				},
				"description": "Upload the actual file content to S3 using the presigned URL"
			},
			"response": []
		},
		{
			"name": "3. Confirm Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('Upload confirmed successfully');",
							"    console.log('File metadata:', JSON.stringify(response.file_metadata, null, 2));",
							"} else {",
							"    console.log('Failed to confirm upload:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{id_token}}",
						"description": "JWT token from Cognito"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"confirm\",\n    \"file_id\": \"{{file_id}}\",\n    \"file_size\": 65\n}"
				},
				"url": {
					"raw": "{{api_url}}/file-upload",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"file-upload"
					]
				},
				"description": "Confirm that the file was successfully uploaded to S3"
			},
			"response": []
		},
		{
			"name": "4. Get File Metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('File metadata retrieved successfully');",
							"    console.log('Metadata:', JSON.stringify(response, null, 2));",
							"} else {",
							"    console.log('Failed to get file metadata:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{id_token}}",
						"description": "JWT token from Cognito"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"get\",\n    \"file_id\": \"{{file_id}}\"\n}"
				},
				"url": {
					"raw": "{{api_url}}/file-upload",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"file-upload"
					]
				},
				"description": "Get metadata for a specific file"
			},
			"response": []
		},
		{
			"name": "5. List Files",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('Files listed successfully');",
							"    console.log('Number of files:', response.files.length);",
							"    response.files.forEach((file, index) => {",
							"        console.log(`File ${index + 1}:`, file.original_filename, `(${file.file_size} bytes)`);",
							"    });",
							"} else {",
							"    console.log('Failed to list files:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{id_token}}",
						"description": "JWT token from Cognito"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"list\",\n    \"project_id\": \"optional-project-id\"\n}"
				},
				"url": {
					"raw": "{{api_url}}/file-upload",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"file-upload"
					]
				},
				"description": "List all files for the authenticated user, optionally filtered by project"
			},
			"response": []
		},
		{
			"name": "6. Generate Download URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    if (response.download_url) {",
							"        pm.environment.set('download_url', response.download_url);",
							"        console.log('Download URL generated successfully');",
							"        console.log('Download URL:', response.download_url);",
							"        console.log('Filename:', response.filename);",
							"    }",
							"} else {",
							"    console.log('Failed to generate download URL:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{id_token}}",
						"description": "JWT token from Cognito"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"download\",\n    \"file_id\": \"{{file_id}}\",\n    \"expiration\": 3600\n}"
				},
				"url": {
					"raw": "{{api_url}}/file-upload",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"file-upload"
					]
				},
				"description": "Generate a presigned URL for downloading a file from S3"
			},
			"response": []
		},
		{
			"name": "7. Download File from S3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    console.log('File downloaded successfully');",
							"    console.log('Content:', pm.response.text());",
							"} else {",
							"    console.log('Failed to download file:', pm.response.text());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{download_url}}",
					"host": [
						"{{download_url}}"
					]
				},
				"description": "Download the actual file content from S3 using the presigned URL"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Verify required environment variables",
					"if (!pm.environment.get('api_url')) {",
					"    console.log('WARNING: api_url environment variable not set');",
					"}",
					"if (!pm.environment.get('id_token')) {",
					"    console.log('WARNING: id_token environment variable not set');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for all requests",
					"if (pm.response.code >= 400) {",
					"    console.log('Error Response Body:', pm.response.text());",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_url",
			"value": "https://your-api-gateway-url.execute-api.region.amazonaws.com/prod",
			"description": "Base URL for the AWS API Gateway"
		},
		{
			"key": "id_token",
			"value": "your-cognito-id-token-here",
			"description": "JWT ID token from Cognito authentication"
		}
	]
} 