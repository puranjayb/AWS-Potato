{
	"info": {
		"_postman_id": "13bcd3ac-eb6a-4801-ac97-d7c82ef2d866",
		"name": "AWS Potato API",
		"description": "Complete API collection for AWS Potato application.\n\nAPI Base URL: https://cnlh88bgc7.execute-api.us-west-2.amazonaws.com/prod\n\nPassword Requirements:\n- Minimum 8 characters\n- At least 1 uppercase letter (A-Z)\n- At least 1 lowercase letter (a-z)\n- At least 1 number (0-9)\n- At least 1 symbol (!@#$%^&*)\n\nExamples:\n✅ Valid: \"Password123!\"\n❌ Invalid: \"password\" (no uppercase/numbers/symbols)\n❌ Invalid: \"Pass1!\" (too short)\n\nAPI Endpoints:\n- POST /auth - User authentication (signup, signin)\n- POST /projects - Project management (create_project, get_projects)\n- POST /file-upload - File operations (upload, confirm, get, list, download)\n\nAuthentication: Use Bearer token from signin response for protected endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29552605"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Signup User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test successful signup",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Signup successful', function () {",
									"        pm.expect(response.message).to.eql('User created successfully');",
									"        pm.expect(response.username).to.exist;",
									"        pm.expect(response.project.project_id).to.exist;",
									"    });",
									"    console.log('User created successfully:', response.username);",
									"    if (response.project) {",
									"        pm.collectionVariables.set('project_id', response.project.project_id);",
									"        console.log('Project ID saved:', response.project.project_id);",
									"    }",
									"}",
									"",
									"// Test error responses",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    pm.test('Error handled properly', function () {",
									"        pm.expect(response.error).to.exist;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"    ",
									"    if (response.error === 'Invalid password') {",
									"        pm.test('Password validation error', function () {",
									"            pm.expect(response.message).to.include('Password must be at least 8 characters');",
									"        });",
									"    }",
									"    ",
									"    if (response.error === 'Username already exists') {",
									"        pm.test('Duplicate username error', function () {",
									"            pm.expect(response.message).to.include('Please choose a different username');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"signup\",\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"YourSecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/auth",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Create a new user account. Automatically creates a project for the user."
					},
					"response": []
				},
				{
					"name": "Signin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test successful signin",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Signin successful', function () {",
									"        pm.expect(response.message).to.eql('Authentication successful');",
									"        pm.expect(response.tokens).to.exist;",
									"        pm.expect(response.tokens.IdToken).to.exist;",
									"        pm.expect(response.project).to.exist;",
									"        pm.expect(response.project.project_id).to.exist;",
									"    });",
									"    if (response.tokens && response.tokens.IdToken) {",
									"        pm.collectionVariables.set('access_token', response.tokens.IdToken);",
									"        console.log('IdToken saved to collection variable');",
									"    }",
									"    if (response.project) {",
									"        pm.collectionVariables.set('project_id', response.project.project_id);",
									"        console.log('Project ID saved:', response.project.project_id);",
									"    }",
									"}",
									"",
									"// Test error responses",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    pm.test('400 error handled properly', function () {",
									"        pm.expect(response.error).to.exist;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}",
									"",
									"if (pm.response.code === 401) {",
									"    const response = pm.response.json();",
									"    pm.test('401 authentication error', function () {",
									"        pm.expect(response.error).to.exist;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"signin\",\n    \"username\": \"testuser\",\n    \"password\": \"YourSecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/auth",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Sign in with existing user credentials. Returns JWT tokens and user project info."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user signup and signin (no auth required)"
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.project_id) {",
									"        pm.collectionVariables.set('project_id', response.project_id);",
									"        console.log('Project ID saved:', response.project_id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"create_project\",\n    \"user_id\": \"{{username}}\",\n    \"email\": \"test@example.com\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/projects",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"projects"
							]
						},
						"description": "Create a new project for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get User Projects",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"get_projects\",\n    \"user_id\": \"{{username}}\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/projects",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"projects"
							]
						},
						"description": "Get all projects for the authenticated user"
					},
					"response": []
				}
			],
			"description": "Project management endpoints (requires authentication)"
		},
		{
			"name": "File Upload",
			"item": [
				{
					"name": "Generate Upload URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Upload URL generated successfully', function () {",
									"        pm.expect(response.upload_url).to.exist;",
									"        pm.expect(response.file_id).to.exist;",
									"        pm.expect(response.s3_key).to.exist;",
									"        pm.expect(response.method).to.eql('PUT');",
									"        pm.expect(response.expires_in).to.be.a('number');",
									"    });",
									"    if (response.upload_url) {",
									"        pm.collectionVariables.set('upload_url', response.upload_url);",
									"        pm.collectionVariables.set('pending_file_id', response.file_id);",
									"        pm.collectionVariables.set('s3_key', response.s3_key);",
									"        console.log('Upload URL generated for file:', response.file_id);",
									"        console.log('S3 Key:', response.s3_key);",
									"    }",
									"}",
									"",
									"// Test error responses",
									"if (pm.response.code === 400) {",
									"    const response = pm.response.json();",
									"    pm.test('Error handled properly', function () {",
									"        pm.expect(response.error).to.exist;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"upload\",\n    \"filename\": \"test-document.txt\",\n    \"content_type\": \"text/plain\",\n    \"project_id\": \"{{project_id}}\",\n    \"expiration\": 3600\n}"
						},
						"url": {
							"raw": "{{api_url}}/file-upload",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"file-upload"
							]
						},
						"description": "Generate a presigned URL for uploading files directly to S3. This creates a file record with 'pending' status and returns a URL for direct S3 upload."
					},
					"response": []
				},
				{
					"name": "Upload to S3 (Using Presigned URL)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/pdf"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/aryanraj/Library/Mobile Documents/com~apple~CloudDocs/Aryan_resume_new.pdf"
							}
						},
						"url": {
							"raw": "{{upload_url}}",
							"host": [
								"{{upload_url}}"
							]
						},
						"description": "Upload file directly to S3 using the presigned URL. Select a file in the Body tab."
					},
					"response": []
				},
				{
					"name": "Confirm Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Upload confirmed successfully', function () {",
									"        pm.expect(response.message).to.include('confirmed successfully');",
									"        pm.expect(response.file_metadata).to.exist;",
									"        pm.expect(response.file_metadata.file_id).to.exist;",
									"    });",
									"    ",
									"    // Save the confirmed file ID for testing",
									"    if (response.file_metadata && response.file_metadata.file_id) {",
									"        pm.collectionVariables.set('last_file_id', response.file_metadata.file_id);",
									"        console.log('Confirmed file ID saved:', response.file_metadata.file_id);",
									"        console.log('File name:', response.file_metadata.original_filename);",
									"        console.log('Upload status:', response.file_metadata.upload_status);",
									"    }",
									"} else {",
									"    console.log('Upload confirmation failed with status:', pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"confirm\",\n    \"file_id\": \"{{pending_file_id}}\",\n    \"file_size\": 50000000\n}"
						},
						"url": {
							"raw": "{{api_url}}/file-upload",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"file-upload"
							]
						},
						"description": "Confirm successful upload to S3 and update file status to 'uploaded'. Call this after successfully uploading a file via presigned URL."
					},
					"response": []
				},
				{
					"name": "List Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Files listed successfully', function () {",
									"        pm.expect(response.files).to.be.an('array');",
									"    });",
									"    ",
									"    console.log('Found', response.files.length, 'files');",
									"    ",
									"    // Save the first file ID for testing purposes",
									"    if (response.files.length > 0) {",
									"        const firstFile = response.files[0];",
									"        pm.collectionVariables.set('last_file_id', firstFile.file_id);",
									"        console.log('First file ID saved:', firstFile.file_id);",
									"        console.log('First file name:', firstFile.original_filename);",
									"        console.log('Upload status:', firstFile.upload_status);",
									"    } else {",
									"        console.log('No files found - upload a file first');",
									"        pm.collectionVariables.set('last_file_id', '');",
									"    }",
									"    ",
									"    // List all files for reference",
									"    response.files.forEach((file, index) => {",
									"        console.log(`File ${index + 1}: ${file.original_filename} (${file.file_id}) - ${file.upload_status}`);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"list\",\n    \"project_id\": \"{{project_id}}\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/file-upload",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"file-upload"
							]
						},
						"description": "List all files for the authenticated user, optionally filtered by project_id."
					},
					"response": []
				},
				{
					"name": "Get File Metadata",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"get\",\n    \"file_id\": \"{{last_file_id}}\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/file-upload",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"file-upload"
							]
						},
						"description": "Get detailed metadata for a specific file by file_id."
					},
					"response": []
				},
				{
					"name": "Generate Download URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.download_url) {",
									"        pm.collectionVariables.set('download_url', response.download_url);",
									"        console.log('Download URL generated');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"download\",\n    \"file_id\": \"{{last_file_id}}\",\n    \"expiration\": 3600\n}"
						},
						"url": {
							"raw": "{{api_url}}/file-upload",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"file-upload"
							]
						},
						"description": "Generate a presigned URL for downloading a file from S3. The URL expires after the specified time."
					},
					"response": []
				},
				{
					"name": "Delete File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('File deleted successfully', function () {",
									"        pm.expect(response.message).to.include('deleted successfully');",
									"        pm.expect(response.file_id).to.exist;",
									"        pm.expect(response.filename).to.exist;",
									"        pm.expect(response.deleted_at).to.exist;",
									"    });",
									"    console.log('File deleted:', response.filename);",
									"    console.log('File ID:', response.file_id);",
									"    ",
									"    // Clear the deleted file from variables",
									"    if (response.file_id === pm.collectionVariables.get('last_file_id')) {",
									"        pm.collectionVariables.set('last_file_id', '');",
									"        console.log('Cleared last_file_id variable');",
									"    }",
									"} else if (pm.response.code === 404) {",
									"    pm.test('File not found error', function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.error).to.include('File not found');",
									"    });",
									"} else if (pm.response.code === 400) {",
									"    pm.test('Bad request error', function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.error).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"delete\",\n    \"file_id\": \"{{last_file_id}}\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/file-upload",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"file-upload"
							]
						},
						"description": "Delete a file from both S3 storage and database. Requires file_id and user must own the file."
					},
					"response": []
				},
				{
					"name": "Download File",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{download_url}}",
							"host": [
								"{{download_url}}"
							]
						},
						"description": "Download file directly from S3 using the presigned URL"
					},
					"response": []
				}
			],
			"description": "File upload and management endpoints with base64 and presigned URL support (requires authentication)"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-add Authorization header for authenticated endpoints",
					"const accessToken = pm.collectionVariables.get('access_token');",
					"const requestName = pm.info.requestName;",
					"",
					"// Skip auth for signup/signin requests",
					"if (accessToken && !requestName.includes('Signup') && !requestName.includes('Signin') && !requestName.includes('S3') && !requestName.includes('Download File')) {",
					"    if (!pm.request.headers.has('Authorization')) {",
					"        pm.request.headers.add({",
					"            key: 'Authorization',",
					"            value: `Bearer ${accessToken}`",
					"        });",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_url",
			"value": "https://cnlh88bgc7.execute-api.us-west-2.amazonaws.com/prod",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "testuser",
			"type": "string"
		},
		{
			"key": "project_id",
			"value": ""
		},
		{
			"key": "upload_url",
			"value": ""
		},
		{
			"key": "pending_file_id",
			"value": ""
		},
		{
			"key": "s3_key",
			"value": ""
		},
		{
			"key": "download_url",
			"value": ""
		},
		{
			"key": "last_file_id",
			"value": ""
		}
	]
}